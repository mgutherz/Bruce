head	1.8;
access;
symbols;
locks
	blj:1.8; strict;
comment	@% @;


1.8
date	94.11.28.22.53.44;	author blj;	state Exp;
branches;
next	1.7;

1.7
date	94.11.21.20.44.45;	author blj;	state Exp;
branches;
next	1.6;

1.6
date	94.11.20.01.25.09;	author blj;	state Exp;
branches;
next	1.5;

1.5
date	94.11.19.23.04.05;	author blj;	state Exp;
branches;
next	1.4;

1.4
date	94.11.19.19.40.56;	author blj;	state Exp;
branches;
next	1.3;

1.3
date	94.11.19.18.22.06;	author blj;	state Exp;
branches;
next	1.2;

1.2
date	94.11.19.16.23.39;	author blj;	state Exp;
branches;
next	1.1;

1.1
date	94.11.19.02.46.55;	author blj;	state Exp;
branches;
next	;


desc
@INITIAL CHECK-IN
@


1.8
log
@about to add a whole new level of abstraction,
where the old system is used to generate an enormous
amount of raw material, and a structurizer module will
enforce some structure on the thing.
@
text
@#
#
# composer.pl
#
#



#
#
# init_composer
#
# called at startup time
#
#

sub init_composer {
    print "init_composer\n" if $DEBUG;

    #
    # first set up the special events table:
    #
    $Events = 0;
    &add_event(	\&create_new_primary,		$CreateTheme_Pprob);
    &add_event(	\&create_mod_primary,		$CreateTheme_Pprob);
    &add_event(	\&promote_secondary_theme,	$CreateTheme_Pprob);
    &add_event(	\&create_mod_secondary,		$CreateTheme_Pprob);
    &add_event(	\&create_new_secondary,		$CreateTheme_Pprob);
    &add_event(	\&change_instr_mappings,	$ChangeMappings_Pprob);
    &add_event(	\&repeat_section_literal,	$RepeatSectionLiteral_Pprob);
    &add_event(	\&repeat_section_modified,	$RepeatSectionModified_Pprob);
    &add_event(	\&repeat_recent_literal,	$RepeatRecentLiteral_Pprob);
    &add_event(	\&repeat_recent_modified,	$RepeatRecentModified_Pprob);

    #
    # now set up the instrument mappings
    # perhaps this should change to have pseudoprobabilities like events?
    #
    $InstrumentChoices = [
	"cello",
	"violin",
	"viola",
	"strings",
	"harp",
	"pizzicato",
	"fender",
	"rock",
	"oboe",
	"clarinet",
	"flute",
	"sax",
	"brass",
	"frenchhorn",
	"trumpet",
	"muted",
	"trombone",
	"bassoon",
	"piano",
	"orchestra",
	"bells",
	"drums",
	"glass",
	"bottles",
	"mallet",
	"choir",
	"voices",
	"malechoir",
	"femalechoir",
	"synth1",
	"synth2",
	"synth3",
	"synth4",
	"synth5",
	"synth6",
    ];
    $NumInstrChoices = @@$InstrumentChoices;
}


sub add_event {
    my ($event, $likelihood) = @@_;
    my $i;

    print "add_event\n" if $DEBUG;

    for ($i=0; $i<$likelihood; $i++) {
	$event_table[$i + $Events] = $event;
    }
    $Events += $likelihood;
}



sub promote_secondary_theme {
    print "promote_secondary_theme\n" if $DEBUG;

    &set_primary_theme(\%Themes, int(rand($Secondary)));
}


sub create_new_primary {
    my (%theme);

    print "create_new_primary\n" if $DEBUG;

    create_theme(\%theme, 0);
    set_primary_theme(\%theme, 0);
}

sub create_mod_primary {
    my (%theme);

    print "create_mod_primary\n" if $DEBUG;

    modify_theme(\%Themes, &choose_theme, \%theme, 0);
    set_primary_theme(\%theme, 0);
}


sub create_new_secondary {
    my (%theme);

    print "create_new_secondary\n" if $DEBUG;

    create_theme(\%theme, 0);
    set_secondary_theme(\%theme, 0);
}

sub create_mod_secondary {
    my (%theme);

    print "create_mod_secondary\n" if $DEBUG;

    modify_theme(\%Themes, &choose_theme, \%theme, 0);
    set_secondary_theme(\%theme, 0);
}


sub change_instr_mappings {
    my($i, $choice, $badlist, $key, $val);

    print "change_instr_mappings\n" if $DEBUG;
    while (($key,$val) = each %badlist) {
	$badlist{ $key } = 0;
    }

    for ($i=1; $i<=$NumInstruments; $i++) {
	do {
	    $choice = $InstrumentChoices->[ int(rand($NumInstrChoices)) ];
	} while ($badlist{ $choice });
	$InstrMapping[ $i ] = $choice;
	$badlist{ $choice } = $i;
    }
}


sub repeat_section_literal {
    my($i, $from, $to, $incr);

    print "repeat_section_literal\n" if $DEBUG;

    $from = int(rand($ID));
    $to = int(rand($ID));
    $incr = ($from < $to) ? 1 : -1 ;

    for ($i=$from; $i != $to; $i+=$incr) {
	&copy_theme(\%Phrases, $i, \%Phrases, $ID, @@AllTypes);
	$ID++;

	print "PHRASE $ID\n" if $DEBUG;
    }
}



sub repeat_section_modified {
    my($i, $from, $to, $incr);

    print "repeat_section_modified\n" if $DEBUG;

    $from = int(rand($ID));
    $to = int(rand($ID));
    $incr = ($from < $to) ? 1 : -1 ;

    for ($i=$from; $i != $to; $i+=$incr) {
	&modify_theme(\%Phrases, $i, \%Phrases, $ID);
	$ID++;

	print "PHRASE $ID\n" if $DEBUG;
    }
}



sub repeat_recent_literal {
    my($i, $from);

    print "repeat_recent_literal\n" if $DEBUG;

    $from = int(rand(log($ID+1) / log(2))) + 2;

    for ($i=0; $i < $from; $i++) {
	print "PHRASE ", $ID + $i, "\n" if $DEBUG;

	&copy_theme(\%Phrases, $ID - $from + $i, \%Phrases, $ID + $i, @@AllTypes);
    }
    $ID += $from;

    print "PHRASE $ID\n" if $DEBUG;
}


sub repeat_recent_modified {
    my($i, $from);

    print "repeat_recent_modified\n" if $DEBUG;

    $from = int(rand(log($ID+1) / log(2))) + 2;

    for ($i=0; $i < $from; $i++) {
	print "PHRASE ", $ID + $i, "\n" if $DEBUG;

	&modify_theme(\%Phrases, $ID - $from + $i, \%Phrases, $ID + $i);
    }
    $ID += $from;

    print "PHRASE $ID\n" if $DEBUG;
}



#
#
# do_special_event
#
# chooses among several options for things to do, like change keys, change instrument
# mappings, repeat sections, repeat the last phrase, repeat sections with modifications
#
# Note: right now, all of the possible special events are equally likely
#

sub do_special_event {
    print "do_special_event\n" if $DEBUG;

    &{ $event_table[ int(rand($Events)) ] } ;
}






#
#
# compose_phrase
#
# makes a phrase and sticks it into the Phrase array.
#
#

sub compose_phrase {
    my (@@List, %Theme, $len, $i);

    print "compose_phrase\n" if $DEBUG;

    $i = int(rand($NumInstruments)) + 1;
    $Phrases{ $ID.$Channel }	= $i;
    $Phrases{ $ID.$Instrument }	= $InstrMapping[ $i ];
    $Phrases{ $ID.$Measures }	= &random_measures;
    for (@@KeyTypes) {
	if (&random($KeyChange->{ $_ })) {
	    $Phrases{ $ID.$_ } =	&{ $vary->{ $_ } } (\%Phrases, $ID);
	}
    }

    $len = &choose_phraselen;
    $i = &choose_theme;

    for (@@NoteTypes) {
	$Phrases{ $ID.$_ } =	&{ $vary->{ $_ } } (\%Themes, $i, $len);
    }

    $ID++;

    print "PHRASE $ID\n" if $DEBUG;
}



sub create_score {
    print "create_score\n" if $DEBUG;

    print "PHRASE $ID\n" if $DEBUG;
    while ($ID <= $MaxPhrases) {
	if (&random($SpecialEvent)) {
	    &do_special_event;
	} else {
	    &compose_phrase;
	}
    }

    $Phrases{ $ID_start . $Measures } = 0;
}







sub modify_score {
    my ($i, $id);

    print "modify_score\n" if $DEBUG;

    &create_new_primary;

    for ($i=0; $i<$BadSections; $i++) {
	$id = $BadList{ $i . $Badstr };

	#
	# id is now the highest ID that was involved in the BAD section.
	# as long as the Measures value is zero, it makes sense to modify
	# each Phrase and the one before it.
	#

#	do {
#	    next if $Phrases{ $id.$Modified };
#	    print "MODIFY_SCORE $i:$id\n" if $DEBUG2;

	    for ( $Pitches, $Rhythms, $Measures ) {
		if (&random($ModificationProb)) {
		    if (&random($ModifyOverOthers)) {
			&{ $modify->{ $_ } } (\%Phrases, $id);
		    } elsif (&random($RandomOverVary)) {
			$Phrases{ $id.$_ } =	&{ $randomly->{ $_ } } (\%Phrases, $id, $Phrases{ $id.$_ }->[0]);
		    } else {
			$Phrases{ $id.$_ } =	&{ $vary->{ $_ } } (\%Phrases, $id, $Phrases{ $id.$_ }->[0]);
		    }
		}
	    }
#	    $Phrases{ $id.$Modified } = 1;
#	} while ($Phrases{ $id . $Measures } == 0 && $id-- > 0);
    }
}






1;
@


1.7
log
@GA part seems to be more or less working.
@
text
@d270 2
a271 2
    if (&random($KeyChange)) {
	for (@@KeyTypes) {
d327 3
a329 3
	do {
	    next if $Phrases{ $id.$Modified };
	    print "MODIFY_SCORE $i:$id\n" if $DEBUG2;
d333 1
a333 1
		    if (&random($ModifyOverVary)) {
d335 2
d342 2
a343 2
	    $Phrases{ $id.$Modified } = 1;
	} while ($Phrases{ $id . $Measures } == 0 && $id-- > 0);
@


1.6
log
@Working.  Good place to back up to, if needed.
@
text
@d312 2
d315 28
@


1.5
log
@Has GA portion working (?)
everything looks pretty okay -- no missing data bugs anymore
(where a portion of a field is uninitialized, leaving gaps in
the output).  so far, ear doesn't hate anything; gotta work
on that.
@
text
@d200 1
a200 1
    $from = int(rand(log($ID) / log(2))) + 2;
d218 1
a218 1
    $from = int(rand(log($ID) / log(2))) + 2;
d302 1
a302 1
    $Phrases{ 0 . $Measures } = 0;
@


1.4
log
@OKAY, SO IT's FINALLY FUCKING WORKING,

NOW

I CAN START WORKING ON THE EAR
@
text
@d140 1
a140 1
    my($i, $choice, $badlist);
d143 3
d269 1
a269 1
    $Phrases{ $ID.$Measures }	= int(rand($MaxMeasures));
d272 1
a272 1
	    $Phrases{ $ID.$_ } =	&{ $vary->{ $_ } } ;
d303 10
@


1.3
log
@Just about done for now - about to add the ear
@
text
@d18 1
a18 3
    if ($DEBUG) {
	print "init_composer\n";
    }
d84 2
d95 2
d104 2
d113 2
d123 2
d132 2
d142 2
d157 2
d176 2
d195 2
d200 2
a202 2

	print "PHRASE ", $ID + $i, "\n" if $DEBUG;
d213 2
d218 2
a220 2

	print "PHRASE ", $ID + $i, "\n" if $DEBUG;
d240 2
d252 1
a252 1
# do_phrase
d258 1
a258 1
sub do_phrase {
d261 2
d288 3
d295 1
a295 1
	    &do_phrase;
d298 2
@


1.2
log
@another checkin - mostly working now
@
text
@d109 1
a109 1
    modify_theme(\Themes, &choose_theme, \%theme, 0);
d124 1
a124 1
    modify_theme(\Themes, &choose_theme, \%theme, 0);
d152 2
d169 2
d183 2
d187 2
d199 2
a202 1
}
d204 1
a204 7

sub change_key {
    my ($id) = @@_;

    for (@@KeyTypes) {
	$Phrases{ $ID.$_ } =	&{ $vary->{ $_ } } ;
    }
a208 1

d244 3
a246 1
	&change_key($ID);
d249 1
a249 1
    $len = int(rand(8)) + 1;
d257 2
@


1.1
log
@Initial revision
@
text
@d84 1
d235 1
a235 1
    my (@@List, %Theme, $len);
d237 4
a240 3
    $Phrases{ $ID.$Channel }	= int(rand($NumInstruments)) + 1;
    $Phrases{ $ID.$Instrument }	= $InstrMapping[ $Phrases{ $ID.$Channel } ];
    $Phrases{ $ID.$Measures }	= int(rand(8));
d244 1
d246 1
d249 1
a249 1
	$Phrases{ $ID.$_ } =	&{ $vary->{ $_ } } (\%Themes, &choose_theme, $len);
a250 5

    #$Phrases{ $ID.$Pitches } =		&vary_pitch		(\%Themes, &choose_theme, $len);
    #$Phrases{ $ID.$Rhythms } =		&vary_rhythm		(\%Themes, &choose_theme, $len);
    #$Phrases{ $ID.$Articulations } =	&vary_articulation	(\%Themes, &choose_theme, $len);
    #$Phrases{ $ID.$Velocities } =	&vary_velocity		(\%Themes, &choose_theme, $len);
@
