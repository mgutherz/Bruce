head	1.5;
access;
symbols;
locks
	blj:1.5; strict;
comment	@% @;


1.5
date	94.11.28.22.53.44;	author blj;	state Exp;
branches;
next	1.4;

1.4
date	94.11.21.20.44.45;	author blj;	state Exp;
branches;
next	1.3;

1.3
date	94.11.20.01.25.09;	author blj;	state Exp;
branches;
next	1.2;

1.2
date	94.11.19.23.04.05;	author blj;	state Exp;
branches;
next	1.1;

1.1
date	94.11.19.02.46.55;	author blj;	state Exp;
branches;
next	;


desc
@INITIAL CHECK-IN
@


1.5
log
@about to add a whole new level of abstraction,
where the old system is used to generate an enormous
amount of raw material, and a structurizer module will
enforce some structure on the thing.
@
text
@#
#
# ear.pl
#
#



sub init_ear {
    my ($m, $n);

    print "init_ear\n" if $DEBUG;
    $Quantum = 25;
    $Badstr = 'BAD';
    $TotalSections = 0;
    $Iterations = 1;
    $BestSoFar = 1;

    $halfsteps = {
	"maj" . 0 => 0,
	"maj" . 1 => 0,
	"maj" . 2 => 2,
	"maj" . 3 => 4,
	"maj" . 4 => 5,
	"maj" . 5 => 7,
	"maj" . 6 => 9,
	"maj" . 7 => 11,
	"min" . 0 => 0,
	"min" . 1 => 0,
	"min" . 2 => 2,
	"min" . 3 => 3,
	"min" . 4 => 5,
	"min" . 5 => 7,
	"min" . 6 => 8,
	"min" . 7 => 10,
    };

    #
    # put everything into G#/Ab
    #
    $offsets = {
	'G#' => 0,	'G' => -1,	'Gb' => -2,
	'F#' => -2,	'F' => -3,	'Fb' => -4,
	'E#' => -3,	'E' => -4,	'Eb' => -5,
	'D#' => -5,	'D' => -6,	'Db' => -7,
	'C#' => -7,	'C' => -8,	'Cb' => -9,
	'B#' => -8,	'B' => -9,	'Bb' => -10,
	'A#' => -10,	'A' => -11,	'Ab' => 0,
    };

    &ear_chromosomes($EarGene, 0..99);
}



sub ear_chromosomes {
    my ($filename, @@genelist) = @@_;

    for (@@genelist) {
	sprintf($extension, "%02d", $_);
	unless (open (EAR_GENE, $filename . '.' . $extension)) {
	    print "Error: EAR cannot open file ", $filename . '.' . $extension, "\n" ;
	    return;
	}
	$PreviousGene = 0;
	while (<EAR_GENE>) {
	    chop;
	    $ValidTransitions{ $extension . '.' . $_ } = $_;

	    $num = hex($_);
	    if ($PreviousGene) {
		$PreviousGene |= (($num >> 16) & 0xffff);

		$str = sprintf("%08lx", $PreviousGene);
		$ValidTransitions{ $extension . '.' . $str } = $str;
	    } else {
		$FirstGene = (($num << 16) & 0xffff0000);
	    }
	    $PreviousGene = (($num << 16) & 0xffff0000);
	}
	$FirstGene |= (($num >> 16) & 0xffff);
	$str = sprintf("%08lx", $FirstGene);
	$ValidTransitions{ $extension . '.' . $str } = $str;
	#
	# transitions to & from nothing are valid
	#
	$ValidTransitions{ $extension . '.' . 0 } = 0;
	close(EAR_GENE);
    }
}






sub feed_score_to_ear {
    my ($x, $y, $i, $j, $sections, $start);

    $start = 0;
    $BadSections = 0;
    $TotalTrans = 0;

    for ($i=0; $i<=$TotalSections; $i++) {
	$ToEar[ $i ] = 0;
    }

    for ($ID_start .. $ID-1) {
	$start += $Phrases{ $_ . $Measures } * (100 / $Quantum);
	$x = $Phrases{ $_ . $Pitches };
	$y = $Phrases{ $_ . $Rhythms };
	$Phrases{ $_ . $Modified } = 0;

	$sections = 0;
	for ($i=1; $i<=$x->[0]; $i++) {
	    $ToEar[ int($sections / $Quantum) + $start ] |= &convert($Phrases{ $_ . $Key }, $Phrases{ $_ . $Major }, $x->[$i]) ;
	    $TotalSections = int($sections / $Quantum) + $start;
	    $sections += $y->[$i];
	    
	    $BadList{ $TotalSections } = $_;
	}
    }

    for ($i=0; $i<$TotalSections; &print_chord($j, $ToEar[$j])) {
	do { $x = $ToEar[$i]; }
	    until ($x || ++$i>=$TotalSections);

	$j = $i;
	$i++;

	do { $y = $ToEar[$i]; }
	    until ($y || ++$i>=$TotalSections);

	return if $i >= $TotalSections;

	$TotalTrans++;
	$Check = $x | ($y << 16);
	next if &good_transition($Check);

	$ToEar[$i] |= 0x10000000;
	$BadList{ $BadSections . $Badstr } = $BadList{ $i };
	$BadSections++;
    }

}


sub ear_hates_it {
    if ($BadSections / $TotalTrans < $BestSoFar) {
	$BestSoFar = $BadSections / $TotalTrans;
	&save_this_score($Iterations);
    }
    print "ear_hates_it: $BadSections Bad Sections out of $TotalTrans Total Transitions: ",
		((100 * $BadSections / $TotalTrans) > $BadAllowed) ? "FAIL\n" : "PASS\n" if $DEBUG2;
    if ($Iterations++ > $MaxIts) {
	print STDERR "Best: ", $BestSoFar * 100, "\n";
	return 0;
    }
    return 1;
}



#
#
# convert
#
# given a note value, turns it into a bit
#
#
sub convert {
    my ($key, $major, $note) = @@_;

    return 0 if $note eq $rest;

    $note = ($note + 80) % 8;
    $note = ($offsets->{$key} + $halfsteps->{ $major . $note } + 60) % 12;
    return (1 << $note);
}






#
#
# good_transition
#
# given a transition (from == lower 2 bytes, to = upper 2 bytes)
# it weeps through the list of okay transitions, to see if it
# is a match or not.  returns boolean.
#
#
sub good_transition {
    my ($trans) = @@_;
    my ($key, $val);

    #
    # just in case the exact transition exists ...
    #
    return 1 if ($ValidTransitions{ sprintf("%02ld.%08lx", $EXTENSION, $trans) });

    while (($key,$val) = each %ValidTransitions) {
	if ((hex($val) & $trans) == $trans) {
	    return 1;
	}
    }

    return 0;
}





sub print_chord {
    my ($q, $chord) = @@_;

    return unless $DEBUG2;

    print "m ", int($q / (100 / $Quantum)), " b ", 1 + $q % (100 / $Quantum);
    printf(", %03lx:\t ", $chord & 0xfff) ;
    print "root "	if ($chord & 1);
    print "dim2 "	if ($chord & (1 << 1));
    print "2maj "	if ($chord & (1 << 2));
    print "3min "	if ($chord & (1 << 3));
    print "3maj "	if ($chord & (1 << 4));
    print "4th "	if ($chord & (1 << 5));
    print "trit "	if ($chord & (1 << 6));
    print "5th "	if ($chord & (1 << 7));
    print "6min "	if ($chord & (1 << 8));
    print "6maj "	if ($chord & (1 << 9));
    print "7min "	if ($chord & (1 << 10));
    print "7maj "	if ($chord & (1 << 11));
    print "\tBAD"	if ($chord & 0x10000000);
    print "\n" ;
}





1;
@


1.4
log
@GA part seems to be more or less working.
@
text
@d16 2
d51 38
a88 7
    unless (open (EAR_GENE, $EarGene)) {
	print "Error: EAR cannot open file $EarGene\n" ;
	return;
    }
    while (<EAR_GENE>) {
	chop;
	$ValidTransitions{ $_ } = $_;
a89 5
    #
    # transitions to & from nothing are valid
    #
    $ValidTransitions{ 0 } = 0;
    close(EAR_GENE);
d149 4
d155 5
a159 1
    return (100 * $BadSections / $TotalTrans) > $BadAllowed;
d202 1
a202 1
    return 1 if ($ValidTransitions{ sprintf("08lx", $trans) });
@


1.3
log
@Working.  Good place to back up to, if needed.
@
text
@d14 2
d73 7
d84 1
d91 2
d96 3
a98 2
    for ($i=0; $i<$TotalSections; ) {
	do { $x = $ToEar[$i]; } until ($x || ++$i>=$TotalSections);
d103 2
a104 1
	do { $y = $ToEar[$i]; } until ($y || ++$i>=$TotalSections);
d108 1
d110 1
a110 1
	&good_transition($Check) || (($ToEar[$i] |= 0x10000000) && $BadSections++);
d112 3
a114 1
	&print_chord($j, $ToEar[$j]);
d121 3
a123 3
    print "ear_hates_it: $BadSections Bad Sections out of $TotalSections Total Sections: ",
		((100 * $BadSections / $TotalSections) > $BadAllowed) ? "FAIL\n" : "PASS\n" ;
    return (100 * $BadSections / $TotalSections) > $BadAllowed;
d166 1
a166 3
    if ($ValidTransitions{ sprintf("08lx", $trans) }) {
	return 1;
    }
d184 1
a184 1
#    return unless $DEBUG;
@


1.2
log
@Has GA portion working (?)
everything looks pretty okay -- no missing data bugs anymore
(where a portion of a field is uninitialized, leaving gaps in
the output).  so far, ear doesn't hate anything; gotta work
on that.
@
text
@d10 1
a10 1
    my ($buf);
d13 1
d51 3
a53 2
    while (read(EAR_GENE, $buf, 4)) {
	$ValidTransitions{ $buf } = $buf;
a58 2
    $ValidTransitions{ 0x0000ffff } = 0x0000ffff;
    $ValidTransitions{ 0xffff0000 } = 0xffff0000;
a65 4
sub ear_hates_it {
    return 0;
}

d68 1
a68 1
    my ($x, $y, $i, $quarters, $start, $end);
d71 2
a72 2
    for (0 .. $ID-1) {
	$start += $Phrases{ $_ . $Measures } * $DefaultTimesig;
d76 1
a76 1
	$quarters = 0;
d78 3
a80 3
	    $ToEar[ int($quarters / 25) + $start ] |= &convert($Phrases{ $_ . $Key }, $Phrases{ $_ . $Major }, $x->[$i]) ;
	    $end = int($quarters / 25) + $start;
	    $quarters += $y->[$i];
d84 12
a95 5
    for ($i=0; $i<$end; $i++) {
	$Check = $ToEar[$i] & ($ToEar[$i+1] << 16);
	if (&bad_transition($Check)) {
	    $ToEar[$i] |= 0x10000000;
	}
d97 1
a97 1
	&print_chord($i, $ToEar[$i]);
d99 1
d103 6
d135 1
a135 1
# bad_transition
d139 1
a139 1
# is a mtach or not.  returns boolean.
d142 1
a142 1
sub bad_transition {
d144 1
a144 1
    my($key, $val);
d149 2
a150 2
    if ($ValidTransitions{ $trans }) {
	return 0;
d154 2
a155 2
	if (($val & $trans) == $val) {
	    return 0;
a158 3
    #
    # turn this back on when it's working
    #return 1;
d171 2
a172 1
    print "m ", int($q / $DefaultTimesig), " b ", 1 + $q % $DefaultTimesig, ":\t " ;
@


1.1
log
@Initial revision
@
text
@d7 2
d10 39
a48 2
    if ($DEBUG) {
	print "init_ear\n";
d50 129
d180 4
@
