head	1.8;
access;
symbols;
locks
	blj:1.8; strict;
comment	@% @;


1.8
date	94.11.28.22.53.44;	author blj;	state Exp;
branches;
next	1.7;

1.7
date	94.11.21.20.44.45;	author blj;	state Exp;
branches;
next	1.6;

1.6
date	94.11.20.01.25.09;	author blj;	state Exp;
branches;
next	1.5;

1.5
date	94.11.19.23.04.05;	author blj;	state Exp;
branches;
next	1.4;

1.4
date	94.11.19.19.40.56;	author blj;	state Exp;
branches;
next	1.3;

1.3
date	94.11.19.18.22.06;	author blj;	state Exp;
branches;
next	1.2;

1.2
date	94.11.19.16.24.43;	author blj;	state Exp;
branches;
next	1.1;

1.1
date	94.11.19.02.46.55;	author blj;	state Exp;
branches;
next	;


desc
@INITIAL CHECK-IN
@


1.8
log
@about to add a whole new level of abstraction,
where the old system is used to generate an enormous
amount of raw material, and a structurizer module will
enforce some structure on the thing.
@
text
@#
#
#
# themes.pl
#
# submodule that implements the handling of themes, such as extracting
# portions and modifying them, etc.
#



#
#
# init_themes
#
# called at program start-up
#
#
sub init_themes {

    if ($DEBUG) {
	print "init_themes\n" ;
    }

    $ID = $ID_start;
    $Secondary = 1;

    $Phrases{ $ID . $Speed } =	$DefaultSpeed;
    $Phrases{ $ID . $Timesig } = $DefaultTimesig;

    $Phrases{ $ID . $Key } =	$DefaultKey;
    $Phrases{ $ID . $Octave } =	$DefaultOctave;
    $Phrases{ $ID . $Major } =	$DefaultMajor;
    $Phrases{ $ID . $Measures } =	0;

    $vary = { 
	$Pitches	=> \&vary_pitches,
	$Articulations	=> \&vary_articulations,
	$Rhythms	=> \&vary_rhythms,
	$Velocities	=> \&vary_velocities,

	$Key		=> \&vary_key,
	$Octave		=> \&vary_octave,
	$Major		=> \&vary_major,
	$Channel	=> \&random_channel,
	$Instrument	=> \&map_instrument,
	$Measures	=> \&random_measures,
    };

    $modify = { 
	$Pitches	=> \&modify_pitches,
	$Rhythms	=> \&modify_rhythms,
	$Measures	=> \&random_measures,

	$Articulations	=> \&modify_nothing,
	$Velocities	=> \&modify_nothing,
	$Key		=> \&modify_nothing,
	$Octave		=> \&modify_nothing,
	$Major		=> \&modify_nothing,
	$Channel	=> \&modify_nothing,
	$Instrument	=> \&modify_nothing,
    };

    $randomly = { 
	$Pitches	=> \&random_pitches,
	$Articulations	=> \&random_articulations,
	$Rhythms	=> \&random_rhythms,
	$Velocities	=> \&random_velocities,

	$Key		=> \&random_key,
	$Octave		=> \&random_octave,
	$Major		=> \&random_major,
	$Channel	=> \&random_channel,
	$Instrument	=> \&map_instrument,
	$Measures	=> \&random_measures,
    };

    $Keys = [
	"A", "A#", "Ab", 
	"B", "B#", "Bb", 
	"C", "C#", "Cb", 
	"D", "D#", "Db", 
	"E", "E#", "Eb", 
	"F", "F#", "Fb", 
	"G", "G#", "Gb", 
    ];

    @@rhythmlist = (
	0.25,
	0.5, 0.5,
	1.0, 1.0, 1.0, 1.0, 1.0,
	2.0, 2.0, 2.0,
	4.0,
    );

    @@octavelist = (
	0,
	1, 1,
	2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5,
	6, 6, 6,
	7, 7,
	8
    );
}


#
#
# variations
#
# for the initial cut, they're fairly random
#
#

sub vary_pitches {
    my ($themep, $idx, $len) = @@_;
    my ($i, $j, $a, $b, $t);

    if ($DEBUG) {
	print "vary_pitches \n" ;
    }

    $a = $themep->{ $idx . $Pitches };
    if (!$a) {
	print "vary_pitches: idx $idx; We have problems.\n" ;
    }
    &print_array($a, $len, 'vary_pitches');

    $b[0] = $len;
    $t = - 7 + int(rand(15));
    for ($i=1, $j=rand($a->[0]); $i<=$len; $i++, $j++) {
	if ($a->[($j % $a->[0])+1] eq $rest) {
	    $b[$i] = $rest;
	} else {
	    $b[$i] = $a->[($j % $a->[0])+1] + $t;
	}
    }

    return [ eval join(',', @@b[0 .. $#b]) ];
}



sub vary_articulations {
    my ($themep, $idx, $len) = @@_;
    my ($i, $j, $a, $b, $t);

    if ($DEBUG) {
	print "vary_articulations \n" ;
    }

    $a = $themep->{ $idx . $Articulations };
    if (!$a) {
	print "vary_articulations: idx $idx; We have problems.\n" ;
    }
    &print_array($a, $len, 'vary_artic');

    $b[0] = $len;
    $t = 0.5 + rand(1);
    for ($i=1, $j=rand($a->[0]); $i<=$len; $i++, $j++) {
	$b[$i] = int($a->[($j % $a->[0])+1] * $t);
    }

    return [ eval join(',', @@b[0 .. $#b]) ];
}



sub vary_rhythms {
    my ($themep, $idx, $len) = @@_;
    my ($i, $j, $a, $b, $t);

    if ($DEBUG) {
	print "vary_rhythms \n" ;
    }

    $a = $themep->{ $idx . $Rhythms };
    if (!$a) {
	print "vary_rhythms: idx $idx; We have problems.\n" ;
    }
    &print_array($a, $len, 'vary_rhythms');

    $b[0] = $len;
    $t = $rhythmlist[int(rand(@@rhythmlist))];
    print "HOW DID THIS HAPPEN?\n" unless $t;
    for ($i=1, $j=rand($a->[0]); $i<=$len; $i++, $j++) {
	$b[$i] = $a->[($j % $a->[0])+1] * $t;
    }

    return [ eval join(',', @@b[0 .. $#b]) ];
}



sub vary_velocities {
    my ($themep, $idx, $len) = @@_;
    my ($i, $j, $a, $b, $t);

    if ($DEBUG) {
	print "vary_velocities \n" ;
    }

    $a = $themep->{ $idx . $Velocities };
    if (!$a) {
	print "vary_velocities: idx $idx; We have problems.\n" ;
    }
    &print_array($a, $len, 'vary_velocities');

    $b[0] = $len;
    $t = 0.5 + rand(1);
    for ($i=1, $j=rand($a->[0]); $i<=$len; $i++, $j++) {
	$b[$i] = int($a->[($j % $a->[0])+1] * $t) % 128;
    }

    return [ eval join(',', @@b[0 .. $#b]) ];
}



sub vary_key {
    my ($themep, $id) = @@_;

    if ($DEBUG) {
	print "vary_key \n" ;
    }

    return $Keys->[int(rand(@@$Keys))];
}

sub vary_octave {
    my ($themep, $id) = @@_;

    if ($DEBUG) {
	print "vary_octave \n" ;
    }

    return int(rand(10));
}

sub vary_major {
    my ($themep, $id) = @@_;

    if ($DEBUG) {
	print "vary_major \n" ;
    }

    if (&random(50)) {
	return "maj";
    } else {
	return "min";
    }
}







sub print_array {
    my ($x, $len, $from) = @@_;
    my $i;

    return unless $DEBUG;

    print "print_array from $from: " ;
    return unless $x;

    print "take $len from ", $x->[0], "," ;
    for ($i=1; $i<=$x->[0]; $i++) {
	print " ", $x->[$i] ;
    }
    print "\n";
}



#
#
# choose_theme
#
# we figure that we'll usually choose the primary theme, but
# occasionally we'll take from one of the secondary themes, and
# all of them are equally likely
#
#

sub choose_theme {
    if (&random($ChoosePrimary)) {
	return $Primary;
    } else {
	# stil possible to get the primary, but what the hell
	return int(rand($Secondary));
    }
}


sub choose_phraselen {
    return int(rand($MaxPhraselen)) + 1;
}




#
#
# set_theme
#
# called to add to the list of themes -- we can either set the
# primary theme or add to the list of secondary themes.  when
# the one to add is not the primary theme, increment $Secondary.
# (this is not generally called directly, but by set_primary and
# set_secondary)
#
#
sub set_theme {
    my ($which, $themep) = @@_;
    my $i;

    if ($DEBUG) {
	print "set_theme:\n" ;
	for (@@AllTypes) {
	    print "    $_ : " ;
	    $array = $themep->{$_};
	    for ($i=1; $i<=$array->[0]; $i++) {
		print "$array->[$i] " ;
	    }
	    print "\n";
	}
    }

    for (@@AllTypes) {
	$Themes{ $which.$_ } = $themep->{$_};
    }
}


#
#
# set_primary_theme
# 
# checks to see if there is already a defined theme in the PRIMARY slot;
# if there is, it moves that to the secondary slots first
#
#
sub set_primary_theme {
    my ($themep, $idx) = @@_;

    if ($Themes{$Primary.$Pitches}) {
	&set_secondary_theme(\%Themes, $Primary);
    }
    &copy_theme($themep, $idx, \%Themes, $Primary, @@AllTypes);
}


#
#
# set_secondary_theme
#
# This is the ONLY place where we should be incrementing $Secondary
#
#
sub set_secondary_theme {
    my ($themep, $idx) = @@_;

    &copy_theme($themep, $idx, \%Themes, $Secondary, @@AllTypes);
    $Secondary++;
}


#
#
# copy_theme
#
# generic copy routine to copy all attributes from one place to another
# syntax:
#	from is a pointer to an associative array
#	f_idx is the index into the FROM array
#	to is a pointer to an associative array
#	t_idx is the index into the TO array
#	@@attrs is the list of which attributes to copy
#
#
sub copy_theme {
    my ($fromp, $f_idx, $top, $t_idx, @@attrs) = @@_;
    my ($i, $type);

    for (@@attrs) {

	if ($DEBUG) {
	    $array = $fromp->{$f_idx . $_};
	    if ($array) {
		print "copy_theme $_ : " ;
		for ($i=1; $i<=$array->[0]; $i++) {
		    print "$array->[$i] " ;
		}
		print "\n";
	    }
	}

	if ($fromp->{ $f_idx . $_ }) {
	    $top->{ $t_idx . $_ } = $fromp->{ $f_idx . $_ };
	} elsif ($_ eq $Measures) {
	    $top->{ $t_idx . $_ } = &random_measures;
	}

    }
}




sub create_theme {
    my ($top, $t_idx) = @@_;
    my ($i, $len) = (&choose_theme, &choose_phraselen);

    if ($DEBUG) {
	print "create_theme \n" ;
    }

    for (@@NoteTypes) {
	$top->{ $t_idx.$_ } =	&{ $randomly->{ $_ } } (\%Themes, $i, $len);
    }

    for (@@KeyTypes) {
	$top->{ $t_idx.$_ } =	&{ $vary->{ $_ } } ($top, $t_idx);
    }

    $top->{ $t_idx.$Channel } =		int(rand($NumInstruments)) + 1;
    $top->{ $t_idx.$Instrument } =	$InstrMapping[ $top->{ $t_idx.$Channel } ];
    $top->{ $t_idx.$Measures } =	int(rand(8));
}



sub modify_theme {
    my ($fromp, $f_idx, $top, $t_idx) = @@_;

    if ($DEBUG) {
	print "modify_theme: " ;
	($fromp = \%Phrases) ? print "Phrases " : print "Themes " ;
	print "index $f_idx, to ";
	($top = \%Phrases) ? print "Phrases " : print "Themes " ;
	print "index $t_idx \n";

	&print_array($fromp->{ $f_idx.$Pitches }, 0, "modify_theme");
	print "in modify: $fromp->{ $f_idx.$Pitches }->[0]\n" ;
    }

    for (@@NoteTypes) {
	$top->{ $t_idx.$_ } =	&{ $vary->{ $_ } } ($fromp, $f_idx, $fromp->{ $f_idx.$_ }->[0]);
    }

    for (@@NotNoteTypes) {
	if ($fromp->{ $f_idx.$_ }) {
	    $top->{ $t_idx.$_ } =	$fromp->{ $f_idx.$_ };
	} else {
	    $top->{ $t_idx.$_ } =	&{ $randomly->{ $_ } }($top, $t_idx);
	}
    }
}




#
#
# modifications
#
# used in modify_score, when the ear has rejected the score and we go back to fix it.
# the difference here is that we directly change the array, and return nothing.
# modifications can be anything
#
#

sub modify_pitches {
    my ($themep, $idx) = @@_;
    my ($i, $md, $a, $t);

    if ($DEBUG) {
	print "modify_pitches \n" ;
    }

    $a = $themep->{ $idx . $Pitches };
    &print_array($a, $a->[0], 'modify_pitches');

    $t = rand(3) + 1;
    $md = int(rand(2));
    for ($i=1; $i<=$a->[0]; $i++) {
	next if $a->[$i] eq $rest;
	
	$a->[$i] = ($md) ? int($a->[$i] * $t) : int($a->[$i] / $t);
    }
}

sub modify_rhythms {
    my ($themep, $idx) = @@_;
    my ($i, $a, $t);

    if ($DEBUG) {
	print "modify_rhythms \n" ;
    }

    $a = $themep->{ $idx . $Rhythms };
    &print_array($a, $a->[0], 'modify_rhythms');

    $t =  $rhythmlist[int(rand(@@rhythmlist))];
    for ($i=1; $i<=$a->[0]; $i++) {
	$a->[$i] = $a->[$i] * $t;
    }
}

sub modify_measures {
    my ($themep, $idx) = @@_;

    if ($DEBUG) {
	print "modify_measures \n" ;
    }

    $themep->{ $idx . $Measures } = &random_measures($themep, $idx);
}

sub modify_nothing {
    if ($DEBUG) {
	print "modify_nothing \n" ;
    }
}



#
#
# randomness
#
# for now, they're close to the VARY functions, but soon
# the VARY functions will become less random (initial easy cut)
#
#

sub random_pitches {
    my ($themep, $idx, $len) = @@_;
    my ($i, $a, $b);

    if ($DEBUG) {
	print "random_pitches \n" ;
    }

    $a = $themep->{ $idx . $Pitches };
    if (!$a) {
	print "random_pitches: idx $idx; We have problems.\n" ;
    }
    &print_array($a, $len, 'random_pitches');
    for ($i=1; $i<=$len; $i++) {
	$b[$i] = $a->[int(rand($a->[0])) + 1] - 7 + int(rand(15));
    }
    $b[0] = $len;

    return [ eval join(',', @@b[0 .. $#b]) ];
}



sub random_articulations {
    my ($themep, $idx, $len) = @@_;
    my ($i, $a, $b);

    if ($DEBUG) {
	print "random_articulations \n" ;
    }

    $a = $themep->{ $idx . $Articulations };
    if (!$a) {
	print "random_articulations: idx $idx; We have problems.\n" ;
    }
    &print_array($a, $len, 'random_artic');
    for ($i=1; $i<=$len; $i++) {
	$b[$i] = int($a->[int(rand($a->[0])) + 1] * (0.5 + rand(1)));
    }
    $b[0] = $len;

    return [ eval join(',', @@b[0 .. $#b]) ];
}



sub random_rhythms {
    my ($themep, $idx, $len) = @@_;
    my ($i, $a, $b);

    if ($DEBUG) {
	print "random_rhythms \n" ;
    }

    $a = $themep->{ $idx . $Rhythms };
    if (!$a) {
	print "random_rhythms: idx $idx; We have problems.\n" ;
    }
    &print_array($a, $len, 'random_rhythms');
    for ($i=1; $i<=$len; $i++) {
	$b[$i] = $a->[int(rand($a->[0])) + 1] * $rhythmlist[int(rand(@@rhythmlist))];
    }
    $b[0] = $len;

    return [ eval join(',', @@b[0 .. $#b]) ];
}



sub random_velocities {
    my ($themep, $idx, $len) = @@_;
    my ($i, $a, $b);

    if ($DEBUG) {
	print "random_velocities \n" ;
    }

    $a = $themep->{ $idx . $Velocities };
    if (!$a) {
	print "random_velocities: idx $idx; We have problems.\n" ;
    }
    &print_array($a, $len, 'random_velocities');
    for ($i=1; $i<=$len; $i++) {
	$b[$i] = int($a->[int(rand($a->[0])) + 1] * (0.5 + rand(1))) % 128;
    }
    $b[0] = $len;

    return [ eval join(',', @@b[0 .. $#b]) ];
}



sub random_key {
    my ($themep, $id) = @@_;

    if ($DEBUG) {
	print "random_key \n" ;
    }

    return $Keys->[int(rand(@@$Keys))];
}

sub random_octave {
    my ($themep, $id) = @@_;

    if ($DEBUG) {
	print "random_octave \n" ;
    }

    return $octavelist[int(rand(@@octavelist))];
}

sub random_major {
    my ($themep, $id) = @@_;

    if ($DEBUG) {
	print "random_major \n" ;
    }

    if (&random(50)) {
	return "maj";
    } else {
	return "min";
    }
}



sub random_channel {
    my ($themep, $id) = @@_;

    if ($DEBUG) {
	print "random_channel \n" ;
    }

    return int(rand($NumInstruments)) + 1;
}

sub map_instrument {
    my ($themep, $id) = @@_;

    if ($DEBUG) {
	print "map_instrument \n" ;
    }

    return $InstrMapping[ $themep->{$id.$Channel} ];
}

sub random_measures {
    my ($themep, $id) = @@_;
    my ($i,$j) = (0,0);

    if ($DEBUG) {
	print "random_measures \n" ;
    }

    $j = rand(100);
    for ($i=0; $MaxMeasures->{ $i } > 0; $i++) {
	return $i if $j <= $MaxMeasures->{ $i };
	$j -= $MaxMeasures->{ $i };
    }
    return 0;
}





1;
@


1.7
log
@GA part seems to be more or less working.
@
text
@d88 1
a88 1
    $rhythm_array = [
d90 3
a92 10
	0.5,
	0.5,
	1.0,
	1.0,
	1.0,
	1.0,
	1.0,
	2.0,
	2.0,
	2.0,
d94 1
a94 1
    ];
d96 11
d187 1
a187 1
    $t = $rhythm_array->[int(rand(12))];
d510 1
a510 1
    $t =  $rhythm_array->[int(rand(12))];
d603 1
a603 1
	$b[$i] = $a->[int(rand($a->[0])) + 1] * $rhythm_array->[int(rand(12))];
d652 1
a652 1
    return int(rand(10));
d693 1
d699 6
a704 3
    return 0 if &random($ZeroMeasures);

    return int(rand($MaxMeasures));
@


1.6
log
@Working.  Good place to back up to, if needed.
@
text
@d50 14
d464 63
@


1.5
log
@Has GA portion working (?)
everything looks pretty okay -- no missing data bugs anymore
(where a portion of a field is uninitialized, leaving gaps in
the output).  so far, ear doesn't hate anything; gotta work
on that.
@
text
@d25 1
a25 1
    $ID = 0;
@


1.4
log
@OKAY, SO IT's FINALLY FUCKING WORKING,

NOW

I CAN START WORKING ON THE EAR
@
text
@d46 1
a46 1
	$Instrument	=> \&random_instrument,
d60 1
a60 1
	$Instrument	=> \&random_instrument,
d81 2
d169 1
a169 1
    $t = $rhythm_array->[int(rand(10))];
d206 2
d216 2
d226 2
d388 2
d411 1
a411 1
	$top->{ $t_idx.$_ } =	&{ $vary->{ $_ } } ;
d440 2
a441 2
	if ($fromp->{ $f_idx.$_ } eq "") {
	    $top->{ $t_idx.$_ } =	&{ $randomly->{ $_ } };
d443 1
a443 1
	    $top->{ $t_idx.$_ } =	$fromp->{ $f_idx.$_ };
d522 1
a522 1
	$b[$i] = $a->[int(rand($a->[0])) + 1] * $rhythm_array->[int(rand(10))];
d555 2
d565 2
d575 2
d591 2
d600 3
a602 1
sub random_instrument {
d604 1
a604 1
	print "random_instrument \n" ;
d607 1
a607 1
    return $InstrMapping[ int(rand($NumInstruments)) + 1 ];
d611 2
d616 2
@


1.3
log
@Just about done for now - about to add the ear
@
text
@d26 1
a26 1
    $Secondary = 0;
d42 6
a47 3
	$Key	=> \&vary_key,
	$Octave	=> \&vary_octave,
	$Major	=> \&vary_major,
d50 1
a50 1
    $randomness = { 
d56 6
a61 3
	$Key	=> \&random_key,
	$Octave	=> \&random_octave,
	$Major	=> \&random_major,
d75 10
a84 10
	0 => 0.25,
	1 => 0.5,
	2 => 0.5,
	3 => 1.0,
	4 => 1.0,
	5 => 1.0,
	6 => 2.0,
	7 => 2.0,
	8 => 2.0,
	9 => 4.0,
d107 3
d136 3
d161 3
d168 1
d187 3
d244 2
d269 1
a365 1
	$type = $_;
a367 1
	    print "copy_theme $_ : " ;
d369 6
a374 2
	    for ($i=1; $i<=$array->[0]; $i++) {
		print "$array->[$i] " ;
a375 1
	    print "\n";
d378 2
a379 2
	if ($fromp->{ $f_idx . $type } ne "") {
	    $top->{ $t_idx . $type } = $fromp->{ $f_idx . $type };
d397 1
a397 1
	$top->{ $t_idx.$_ } =	&{ $randomness->{ $_ } } (\%Themes, $i, $len);
d429 6
a434 7
    return;

    #
    # the rest of this maybe should be left out?  makes it too random?
    #
    for (@@KeyTypes) {
	$top->{ $t_idx.$_ } =	&{ $vary->{ $_ } } ;
a435 4

    $top->{ $t_idx.$Channel } =		int(rand($NumInstruments)) + 1;
    $top->{ $t_idx.$Instrument } =	$InstrMapping[ $top->{ $t_idx.$Channel } ];
    $top->{ $t_idx.$Measures } =	int(rand(8));
d461 3
d484 3
d507 3
d530 3
d570 26
@


1.2
log
@another checkin - mostly working now
@
text
@d47 11
d75 1
a75 1
	6 => 1.0,
d88 2
d94 5
a98 1
    my ($i, $a, $b);
d102 9
a110 2
    for ($i=1; $i<=$len; $i++) {
	$b[$i] = $a->[int(rand($a->[0])) + 1] - 7 + int(rand(15));
a111 1
    $b[0] = $len;
d120 5
a124 1
    my ($i, $a, $b);
d128 5
a132 2
    for ($i=1; $i<=$len; $i++) {
	$b[$i] = $a->[int(rand($a->[0])) + 1] * (0.5 + rand(1));
a133 1
    $b[0] = $len;
d142 5
a146 1
    my ($i, $a, $b);
d150 5
a154 2
    for ($i=1; $i<=$len; $i++) {
	$b[$i] = $a->[int(rand($a->[0])) + 1] * $rhythm_array->[int(rand(10))];
a155 1
    $b[0] = $len;
d164 5
a168 1
    my ($i, $a, $b);
d172 5
a176 2
    for ($i=1; $i<=$len; $i++) {
	$b[$i] = ($a->[int(rand($a->[0])) + 1] * (0.5 + rand(1))) % 128;
a177 1
    $b[0] = $len;
d215 3
d224 2
a225 1
    print "print_array from $from: take $len from X: ", $x->[0], "," ;
d253 5
d367 5
d373 7
a379 4
    $top->{ $t_idx.$Pitches } =		[ 3, 5, 1, 9 ];
    $top->{ $t_idx.$Articulations } =	[ 3, 40, 40, 110 ];
    $top->{ $t_idx.$Rhythms } =		[ 3, 25, 25, 50 ];
    $top->{ $t_idx.$Velocities } =	[ 3, 95, 80, 110 ];
a383 1

d391 23
a413 4
    $top->{ $t_idx.$Pitches } =		[ 8, $Rest, 3, 4, 5, 4, 3, 2, 1 ];
    $top->{ $t_idx.$Articulations } =	[ 8, 100, 100, 100, 100, 100, 100, 100, 100, 100 ];
    $top->{ $t_idx.$Rhythms } =		[ 8, 12.5, 12.5, 12.5, 12.5, 12.5, 12.5, 12.5, 12.5 ];
    $top->{ $t_idx.$Velocities } =	[ 8, 90, 90, 90, 90, 100, 90, 80, 70 ];
d418 2
d421 69
d491 53
@


1.1
log
@Initial revision
@
text
@a69 2
    $ID++;

d81 1
a81 1
    my ($a, $b);
d84 1
d86 1
a86 1
	$b[$i] = $a[int(rand($#a)) + 1];
d90 1
a90 1
    return [ $len, join(',', @@b[1 .. $#b]) ];
d97 1
d100 1
d102 1
a102 1
	$b[$i] = $a[int(rand($#a)) + 1];
d106 1
a106 1
    return [ $len, join(',', @@b[1 .. $#b]) ];
d113 1
d116 1
d118 1
a118 1
	$b[$i] = $a[int(rand($#a)) + 1] * $rhythm_array->[int(rand(10))];
d122 1
a122 1
    return [ $len, join(',', @@b[1 .. $#b]) ];
d129 1
d132 1
d134 1
a134 1
	$b[$i] = $a[int(rand($#a)) + 1];
d138 1
a138 1
    return [ $len, join(',', @@b[1 .. $#b]) ];
d174 14
d223 1
d230 2
a231 2
	    for ($j=1; $j<=$array->[0]; $j++) {
		print "$array->[$j] " ;
d291 1
a291 1
    my $type;
d299 2
a300 2
	    for ($j=1; $j<=$array->[0]; $j++) {
		print "$array->[$j] " ;
d305 1
a305 1
	if ($fromp->{ $f_idx . $type } != 0) {
d316 11
a326 1
    print "create_theme" ;
d332 11
a342 1
    my ($fromp, $f_idx, $top, $t_idx);
@
